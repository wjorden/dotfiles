#! /bin/bash

# Default project name... Classic.
project=test

# Gotta help people somewhere
Help(){
	printf "########################################################################"
	printf "#----------------> GenC - C Project Generator v0.1-1a <----------------#"
	printf "#--------------------> Were Verobsity Is Default. <--------------------#"
	printf "########################################################################"
	printf
	printf "#-> Syntax: genc [-p|g|b|h]"
	printf "#-> Options:"
	printf "##-> -p NAME	Specify project name. This will be the directory name."
	printf "##-> -g		Run git init after everything is done."
	printf "##-> -h		Print this help."
	printf
}

# Handle options
while getopts p:gbh flag
do 
	case "${flag}" in
		p) 
			project=${OPTARG};;
		g) 
			git=1;;
		h) 
			Help 
			exit;;
		\?) 
			printf "invalid option. Valid options are -p <name> -g<|optional, enable git<|"
			exit ;;
	esac
done

# prompt for project generation
read -p Generate C project structure for $project? [y]es/[N]o -N 1 reply

# check confirmation
if ! [[ "$reply" =~ ^[yY]$ ]]; then
	printf "Exiting..."
	exit
# check for existing directory
elif [ -d ./$project ]; then
	printf "ERROR: Directory with the name %s exists.\n" $project
	printf "Exiting...\n"
	exit
fi

# Default is verbose
printf "Making Directories..."
mkdir -p $PWD/$project $PWD/$project/src $PWD/$project/include $PWD/$project/lib $PWD/$project/build
printf "Copying template source files!"
cp ~/.config/bash/templates/c/src/* $PWD/$project/src/
printf "Copying template include files!"
cp ~/.config/bash/templates/c/include/* $PWD/$project/include/
printf "Generating README!"
touch $PWD/$project/README.md
printf "# %s" $project > $PWD/$project/README.md
printf "Copying Makefile Template!"
cp ~/.config/bash/templates/c/build/Makefile $PWD/$project/

# git stuff
if  [[ $git != 1  ]]; then
	printf "Git not set."
else
	printf "Running git init."
	git init -b main $PWD/$project/
fi
