#! /bin/bash

#################################################
# 	The whole point of this is to make 	#
#     sure the development packages required 	#
#   	are installed before beginning 		#
#   	 development of any platforms.		#
#-----------------------------------------------#
# System    |  	Language  |      Package	#
#-----------------------------------------------#
#  Base	       ASM/C/C++       base-devel	#
#  Git			      git/github-cli	#
#  TERM			     fd/ripgrep/mad-db	#
#  CMake          txt	          cmake		#
#  Debug       ASM/C/C++      GDB/Valgrind	#
#  AVR	       ASM/C/C++        GNU/Clang	#
#  STM32       ASM/C/C++           GNU		#
#  Raspberry     Python	       MicroPython	#
#################################################

# DEBUG #
 set -x

# RUN AS ROOT # (sudo/doas)
if [[ `id -u` -ne 0 ]]; then
	printf "Please run as root.\n"
	exit
fi

# VARS #
version=v0.1.04a
cloneDir=/usr/.clones

Header(){
	printf "########################################################################\n"
	printf "#----------------> Fresh Install Development %s <----------------#\n"	$version
	printf "#--------------------> Were Verobsity Is Default. <--------------------#\n"
	printf "########################################################################\n"

}


# UPDATE pacman #
source update

# INSTALL OFFICIAL PACKAGES #
Header
printf "Beginning installation of development packages.\n"
printf "Installing base packages...\n"
pacman -S base-devel clang compiler-rt gdb valgrind cmake git github-cli ripgrep fd man-db kitty

# SETUP GIT #
read -p 'Would you like to setup git now? [y]es/[N]o ' -N 1 res
res=${res:-n}
if [[ ${res,} == 'y' ]]; then
	read -p Username: username
	read -p Email: email
	read -p Default branch name: branchName
	git config --global user.name $username
	git config --global user.email $email
	git config --global init.defaultBranch $branchName
fi

# GIT WARN #
printf "\nGit is installed but use (push) may not work if a user is not set.\n"

# CLONE DIRECTORY #
while [[ -d $cloneDir ]]
do
	printf "%s already exists.\n" $cloneDir
	read -p "Where would you like to put git clones? " cloneDir
done

# MAKE CLONE DIR #
printf "\nMaking clone directory...\n"
mkdir -p $cloneDir
# CHANGE OWNER FOR MAKEPKG #
chown $USER $cloneDir

# CLONE AND BUILD #
# PARU
printf "Cloning paru...\n"
git clone https://aur.archlinux.org/paru.git $cloneDir/paru
cd $cloneDir/paru && mkpkg -si

# NEOVIM
printf "Cloning neovim...\n"
git clone https://github.com/neovim/neovim $cloneDir/neovim
cd $cloneDir/neovim
printf "Building and installing neovim...\n"
make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/usr/bin install

# SDL
printf "Cloning SDL3..."
git clone https://github.com/libsdl-org/SDL $cloneDir/SDL
cd $cloneDir/SDL
printf "Building and installing SDL3...\n"
cmake -S $cloneDir/SDL -B $cloneDir/SDL/build  && cmake --build $cloneDir/SDL/build  && cmake --install $cloneDir/SDL/build

# SDL_IMAGE
printf "Cloning SDL_image...\n"
git clone https://github.com/libsdl-org/SDL_image $cloneDir/SDL_image
cd $cloneDir/SDL_image
printf "Building and installing SDL_image...\n"
cmake -S $cloneDir/SDL_image -B $cloneDir/SDL_image/build  && cmake --build $cloneDir/SDL_image/build  && cmake --install $cloneDir/SDL_image/build

# SDL_TTF
printf "Cloning SDL_ttf...\n"
git clone https://github.com/libsdl-org/SDL_ttf $cloneDir/SDL_ttf
cd $cloneDir/SDL_ttf
printf "Building and installing SDL_ttf...\n"
cmake -S $cloneDir/SDL_ttf -B build  && cmake --build $cloneDir/SDL_ttf/build  && cmake --install $cloneDir/SDL_ttf/build

# RASPBERRY #
read -p 'Would you like to install MicroPython for Raspberry Pi? [y]es/[N]o ' -N 1 res
res=${res:-n}
if [[ ${res,} == 'y' && clone ]]; then
	printf "\nCloning MicroPython...\n"
	git clone https://github.com/micropython/micropython $cloneDir/
fi

# END $clone #

# AVR #
read -p 'Would you like to install AVR packages? [y]es/[N]o ' -N 1 res
res=${res:-n}
if [[ ${res,} == 'y' ]]; then
	printf "/nInstalling AVR packages...\n"
	pacman -S avr-binutils avr-gcc avr-gdb avr-libc avr-dude
fi

# STM32 #
read -p $'\nWould you like to install STM32 packages? [y]es/[N]o ' -N 1 res
res=${res:-n}
if [[ ${res,} == 'y' ]]; then
	printf "/nInstalling STM packages...\n"
	pacman -S arm-none-eabi-gcc arm-none-eabi-newlib
fi


# MPY-CROSS #
read -p $'\nWould you like to build for other boards? [y]es/[N]o '-N 1 res
res=${res:-n}
if [[ ${res,} == 'y' ]]; then
 	# read -p Please select the boards you want:
	printf "Need selection menu\n"
fi

# INSTALL AUR PACKAGES #
printf "Installing AUR packages using paru...\n"
if [[ -f `find -name paru` ]]; then
	paru -S nvm mongodb mongodb-tools mongosh-bin
fi

# DONE INSTALLS #
printf "Done installing...\n"

printf "Now that the packages are installed, it's time to add some projects.\n"
printf "Use genc -h for help generating a C project. Project is created at\n"
printf "	$PWD/project\n"
printf "Use gensh -h for help generating a shell script. Script is created at\n"
printf "	$HOME/bash/<script>\n"

# COMPLETE #
printf "Done.\n"
